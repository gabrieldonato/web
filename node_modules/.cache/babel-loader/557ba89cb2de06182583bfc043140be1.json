{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Desktop\\\\Pagarapido\\\\MERN\\\\WEB\\\\web\\\\src\\\\views\\\\Transactions\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Footer from '../../components/Footer';\nimport Header from '../../components/Header';\nimport Collapsible from 'react-collapsible';\nimport api from '../../services/api';\nimport next from \"../../assets/next.png\";\nimport * as S from './styles';\n\nfunction Transactions() {\n  _s();\n\n  const [company, setCompany] = useState([]);\n  const [states, setStates] = useState([]);\n  const [cities, setCities] = useState([]);\n  let userData = {};\n  let transactionData = {\n    \"gatewayKey\": \"8353b77a-0d11-4a81-8b34-ac334bed7287\",\n    \"returnUrl\": \"\",\n    \"foreignOrderId\": \"\",\n    \"amount\": 1.00,\n    \"installments\": 1,\n    \"cardNumber\": \"\",\n    \"cardCvv\": \"\",\n    \"cardExpirationDate\": \"\",\n    \"cardHolderName\": \"\",\n    \"cardFlag\": \"\",\n    \"paymentType\": \"credit_card\",\n    \"customer\": {\n      \"name\": \"\",\n      \"document\": \"\",\n      \"type\": \"private\",\n      \"email\": \"\",\n      \"phoneNumbers\": [],\n      \"addresses\": {\n        \"street\": \"\",\n        \"number\": \"\",\n        \"neighborhood\": \"\",\n        \"city\": \"\",\n        \"postalCode\": \"\",\n        \"state\": \"\"\n      }\n    },\n    \"items\": [{\n      \"name\": \"item para teste\",\n      \"quantity\": 1,\n      \"unitPrice\": 1.00\n    }],\n    \"boletos\": []\n  };\n  const config = {\n    headers: {\n      \"Authorization\": `bearer ${localStorage.getItem('token')}`\n    }\n  };\n  useEffect(() => {\n    validation();\n    loadStates();\n  }); //Carregar Estados\n\n  async function loadStates() {\n    await api.get(`/geo/states`).then(response => {\n      setStates(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  } //Carregar Cidades\n\n\n  async function loadCities() {\n    await api.get(`/geo/states/${transactionData.customer.addresses.state}/cities`).then(response => {\n      setCities(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  } //Atualizar cidades com base no estado\n\n\n  function handleSelectedState(event) {\n    transactionData.customer.addresses.state = `${event.target.value}`;\n    loadCities();\n    let insert = document.getElementById('insertCities');\n    insert.innerHTML = cities.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: c._id,\n      children: c.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this));\n  }\n\n  function validation() {\n    if (localStorage.getItem('token') === null || localStorage.getItem('token') === \"undefined\") {\n      window.location.href = \"/\";\n    }\n  }\n\n  async function handleSign() {\n    await api.post('/signin', {\n      \"email\": `${localStorage.getItem('email')}`,\n      \"password\": `${document.getElementById(\"catchPassword\").value}`\n    }).then(response => {\n      userData = JSON.parse(response.request.response);\n      console.log(response);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastrar Transa\\xE7\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"insertPassword\",\n      children: \"Primeiro, insira a senha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(S.Password, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"catchPassword\",\n        type: \"password\",\n        placeholder: \"Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: next,\n        alt: \"submitPassword\",\n        onClick: handleSign\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Collapsible, {\n      className: \"collMenu\",\n      trigger: \"Cliente\",\n      children: [/*#__PURE__*/_jsxDEV(S.Address, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"street\",\n          type: \"text\",\n          placeholder: \"Endere\\xE7o\",\n          required: true,\n          onChange: event => {\n            transactionData.customer.addresses.street = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"number\",\n          type: \"number\",\n          placeholder: \"N\\xB0\",\n          required: true,\n          onChange: e => {\n            transactionData.customer.addresses.number = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(S.Complement, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"neighborhood\",\n          type: \"text\",\n          placeholder: \"Bairro\",\n          required: true,\n          onChange: e => {\n            transactionData.customer.addresses.neighborhood = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(S.City, {\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"city\",\n          name: \"city\",\n          onChange: e => {\n            transactionData.customer.addresses.city = `${e.target.value}`;\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            value: \"\",\n            children: \"Cidade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"insertCities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this), cities.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: c._id,\n            children: c.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"uf\",\n          name: \"uf\",\n          onLoad: e => {\n            transactionData.customer.addresses.state = `${e.target.value}`;\n          },\n          onChange: handleSelectedState,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            value: \"\",\n            children: \"UF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }, this), states.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: s._id,\n            children: s.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postalcode\",\n          type: \"number\",\n          placeholder: \"CEP\",\n          required: true,\n          onChange: e => {\n            transactionData.customer.addresses.postalCode = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: next,\n        onClick: () => {\n          console.log(transactionData);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Transactions, \"HZvTNTdxs79pHBoSiyg5OsCku88=\");\n\n_c = Transactions;\nexport default Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"sources":["C:/Users/gabri/Desktop/Pagarapido/MERN/WEB/web/src/views/Transactions/index.js"],"names":["React","useEffect","useState","Footer","Header","Collapsible","api","next","S","Transactions","company","setCompany","states","setStates","cities","setCities","userData","transactionData","config","headers","localStorage","getItem","validation","loadStates","get","then","response","data","catch","error","console","log","loadCities","customer","addresses","state","handleSelectedState","event","target","value","insert","document","getElementById","innerHTML","map","c","_id","name","window","location","href","handleSign","post","JSON","parse","request","street","e","number","neighborhood","city","s","postalCode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport Collapsible from 'react-collapsible'\r\nimport api from '../../services/api'\r\nimport next from \"../../assets/next.png\"\r\nimport * as S from './styles'\r\n\r\nfunction Transactions(){\r\n    \r\n    const [company, setCompany] = useState([])\r\n    const [states, setStates] = useState([])\r\n    const [cities, setCities] = useState([])\r\n    let userData = {}\r\n    let transactionData ={\r\n        \"gatewayKey\": \"8353b77a-0d11-4a81-8b34-ac334bed7287\",\r\n        \"returnUrl\": \"\",\r\n        \"foreignOrderId\": \"\",\r\n        \"amount\": 1.00,\r\n        \"installments\": 1,\r\n        \"cardNumber\": \"\",\r\n        \"cardCvv\": \"\",\r\n        \"cardExpirationDate\": \"\",\r\n        \"cardHolderName\": \"\",\r\n        \"cardFlag\": \"\",\r\n        \"paymentType\": \"credit_card\",\r\n        \"customer\": {\r\n        \"name\": \"\",\r\n        \"document\": \"\",\r\n        \"type\": \"private\",\r\n        \"email\": \"\",\r\n        \"phoneNumbers\": [ ],\r\n        \"addresses\": {\"street\": \"\",\r\n                \"number\": \"\",\r\n                \"neighborhood\": \"\",\r\n                \"city\": \"\",\r\n                \"postalCode\": \"\",\r\n                \"state\": \"\"}\r\n        },\r\n        \"items\": [ {\r\n            \"name\": \"item para teste\",\r\n            \"quantity\": 1,\r\n            \"unitPrice\": 1.00\r\n        } ],\r\n        \"boletos\": [ ]\r\n        }\r\n    const config = {\r\n        headers: { \"Authorization\": `bearer ${localStorage.getItem('token')}` }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        validation()\r\n        loadStates()\r\n    })\r\n\r\n    //Carregar Estados\r\n    async function loadStates(){\r\n        await api.get(`/geo/states`)\r\n        .then(response =>{\r\n            setStates(response.data)\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    //Carregar Cidades\r\n    async function loadCities(){\r\n        await api.get(`/geo/states/${transactionData.customer.addresses.state}/cities`)\r\n        .then(response =>{\r\n            setCities(response.data)\r\n        })\r\n        .catch(error =>{    \r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    //Atualizar cidades com base no estado\r\n    function handleSelectedState(event){\r\n        transactionData.customer.addresses.state = `${event.target.value}`\r\n        loadCities()\r\n        let insert = document.getElementById('insertCities')\r\n        insert.innerHTML = cities.map(c => (\r\n            <option value={c._id}>{c.name}</option>\r\n            ))\r\n    }\r\n\r\n    function validation(){\r\n        if(localStorage.getItem('token') === null || localStorage.getItem('token') === \"undefined\"){\r\n            window.location.href = \"/\"\r\n        }\r\n    }\r\n\r\n    async function handleSign(){\r\n        await api.post('/signin', {\r\n            \"email\": `${localStorage.getItem('email')}`,\r\n            \"password\": `${document.getElementById(\"catchPassword\").value}`\r\n        })\r\n        .then(response =>{\r\n            userData = JSON.parse(response.request.response)\r\n            console.log(response)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <S.Container>\r\n            <Header />\r\n            <h1>Cadastrar Transação</h1>\r\n            <p id=\"insertPassword\">Primeiro, insira a senha</p>\r\n            <S.Password>\r\n            <input id=\"catchPassword\" type=\"password\" placeholder=\"Senha\"/>\r\n            <img src={next} alt=\"submitPassword\" \r\n            onClick={handleSign}/>\r\n            </S.Password>\r\n            <Collapsible className=\"collMenu\" trigger=\"Cliente\">\r\n            <S.Address>\r\n                    <input id=\"street\" type=\"text\" \r\n                    placeholder=\"Endereço\" required\r\n                    onChange={(event) => {transactionData.customer.addresses.street = `${e.target.value}`}}\r\n                    />\r\n                    <input id=\"number\" type=\"number\" \r\n                    placeholder=\"N°\" required\r\n                    onChange={e => {transactionData.customer.addresses.number = `${e.target.value}`}}\r\n                    />\r\n                </S.Address>\r\n                <S.Complement>\r\n                    <input id=\"neighborhood\" type=\"text\" \r\n                    placeholder=\"Bairro\" required\r\n                    onChange={e => {transactionData.customer.addresses.neighborhood = `${e.target.value}`}}\r\n                    />\r\n                </S.Complement>\r\n                <S.City>\r\n                    {/* BUSCA POR CIDADES */}\r\n                    <select id=\"city\" name=\"city\" \r\n                    onChange={e => { \r\n                        transactionData.customer.addresses.city = `${e.target.value}`\r\n                    }}>\r\n                    <option selected value=\"\">Cidade</option>\r\n                    <div id=\"insertCities\">\r\n\r\n                    </div>\r\n                    {\r\n                    cities.map(c => (\r\n                    <option value={c._id}>{c.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    {/* BUSCA POR ESTADOS */}\r\n                    <select id=\"uf\" name=\"uf\" \r\n                    onLoad={e => { transactionData.customer.addresses.state = `${e.target.value}`}}\r\n                    onChange={handleSelectedState}>\r\n                    <option selected value=\"\">UF</option>\r\n                    {\r\n                    states.map(s => (\r\n                    <option value={s._id}>{s.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    <input id=\"postalcode\" type=\"number\" \r\n                    placeholder=\"CEP\" required\r\n                    onChange={e => {transactionData.customer.addresses.postalCode = `${e.target.value}`}}\r\n                    />\r\n                </S.City>\r\n                <img src={next} onClick={() =>{console.log(transactionData)}}/>\r\n            </Collapsible>\r\n            <Footer />\r\n        </S.Container>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Transactions"]},"metadata":{},"sourceType":"module"}