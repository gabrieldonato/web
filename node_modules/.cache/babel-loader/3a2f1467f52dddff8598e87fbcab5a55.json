{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Desktop\\\\Pagarapido\\\\MERN\\\\WEB\\\\web\\\\src\\\\views\\\\Transactions\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Footer from '../../components/Footer';\nimport Header from '../../components/Header';\nimport Collapsible from 'react-collapsible';\nimport api from '../../services/api';\nimport next from \"../../assets/next.png\";\nimport * as S from './styles';\n\nfunction Transactions() {\n  _s();\n\n  const [company, setCompany] = useState([]);\n  let pass;\n  let userData = {};\n  let accountData = {};\n  const config = {\n    headers: {\n      \"Authorization\": `bearer ${localStorage.getItem('token')}`\n    }\n  };\n  useEffect(() => {\n    validation();\n  });\n\n  function validation() {\n    if (localStorage.getItem('token') === null || localStorage.getItem('token') === \"undefined\") {\n      window.location.href = \"/\";\n    }\n  } // async function loadUserData(){\n  //     await api.get(`/user/`, config)\n  //     .then(response =>{\n  //         userData = JSON.stringify(response)\n  //         console.log(userData)\n  //     })\n  //     .catch(error =>{\n  //         console.log(error)\n  //     })\n  // }\n\n\n  async function handleSign() {\n    await api.post('/signin', {\n      \"email\": `${localStorage.getItem('email')}`,\n      \"password\": `${document.getElementById(\"catchPassword\").value}`\n    }).then(response => {\n      userData = JSON.parse(response.request.response);\n      console.log(userData.companies[0].integration.gatewayKey);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(S.Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastrar Transa\\xE7\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"insertPassword\",\n      children: \"Primeiro, insira a senha\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(S.Password, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"catchPassword\",\n        type: \"password\",\n        placeholder: \"Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: next,\n        alt: \"submitPassword\",\n        onClick: handleSign\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Collapsible, {\n      className: \"collMenu\",\n      trigger: \"Cliente\",\n      children: [/*#__PURE__*/_jsxDEV(S.Address, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"street\",\n          type: \"text\",\n          placeholder: \"Endere\\xE7o\",\n          required: true,\n          onChange: e => {\n            accountData.address.street = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"number\",\n          type: \"number\",\n          placeholder: \"N\\xB0\",\n          required: true,\n          onChange: e => {\n            accountData.address.number = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(S.Complement, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"neighborhood\",\n          type: \"text\",\n          placeholder: \"Bairro\",\n          required: true,\n          onChange: e => {\n            accountData.address.neighborhood = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(S.City, {\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"city\",\n          name: \"city\",\n          onChange: e => {\n            accountData.address.city = `${e.target.value}`;\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            value: \"\",\n            children: \"Cidade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"insertCities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this), cities.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: c._id,\n            children: c.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"uf\",\n          name: \"uf\",\n          onLoad: e => {\n            accountData.address.state = `${e.target.value}`;\n          },\n          onChange: handleSelectedState,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            value: \"\",\n            children: \"UF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this), states.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: s._id,\n            children: s.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"postalcode\",\n          type: \"number\",\n          placeholder: \"CEP\",\n          required: true,\n          onChange: e => {\n            accountData.address.postalCode = `${e.target.value}`;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Transactions, \"2INVmbK3VTBBvCNV+f/SXe5SHkQ=\");\n\n_c = Transactions;\nexport default Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"sources":["C:/Users/gabri/Desktop/Pagarapido/MERN/WEB/web/src/views/Transactions/index.js"],"names":["React","useEffect","useState","Footer","Header","Collapsible","api","next","S","Transactions","company","setCompany","pass","userData","accountData","config","headers","localStorage","getItem","validation","window","location","href","handleSign","post","document","getElementById","value","then","response","JSON","parse","request","console","log","companies","integration","gatewayKey","e","address","street","target","number","neighborhood","city","cities","map","c","_id","name","state","handleSelectedState","states","s","postalCode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport Collapsible from 'react-collapsible'\r\nimport api from '../../services/api'\r\nimport next from \"../../assets/next.png\"\r\nimport * as S from './styles'\r\n\r\nfunction Transactions(){\r\n    \r\n    const [company, setCompany] = useState([])\r\n    let pass\r\n    let userData = {}\r\n    let accountData ={\r\n        \r\n    }\r\n    const config = {\r\n        headers: { \"Authorization\": `bearer ${localStorage.getItem('token')}` }\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        validation()\r\n    })\r\n\r\n\r\n    function validation(){\r\n        if(localStorage.getItem('token') === null || localStorage.getItem('token') === \"undefined\"){\r\n            window.location.href = \"/\"\r\n        }\r\n    }\r\n\r\n    // async function loadUserData(){\r\n    //     await api.get(`/user/`, config)\r\n    //     .then(response =>{\r\n    //         userData = JSON.stringify(response)\r\n    //         console.log(userData)\r\n    //     })\r\n    //     .catch(error =>{\r\n    //         console.log(error)\r\n    //     })\r\n    // }\r\n\r\n    async function handleSign(){\r\n        await api.post('/signin', {\r\n            \"email\": `${localStorage.getItem('email')}`,\r\n            \"password\": `${document.getElementById(\"catchPassword\").value}`\r\n        })\r\n        .then(response =>{\r\n            userData = JSON.parse(response.request.response)\r\n            console.log(userData.companies[0].integration.gatewayKey)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <S.Container>\r\n            <Header />\r\n            <h1>Cadastrar Transação</h1>\r\n            <p id=\"insertPassword\">Primeiro, insira a senha</p>\r\n            <S.Password>\r\n            <input id=\"catchPassword\" type=\"password\" placeholder=\"Senha\"/>\r\n            <img src={next} alt=\"submitPassword\" \r\n            onClick={handleSign}/>\r\n            </S.Password>\r\n            <Collapsible className=\"collMenu\" trigger=\"Cliente\">\r\n            <S.Address>\r\n                    <input id=\"street\" type=\"text\" \r\n                    placeholder=\"Endereço\" required\r\n                    onChange={e => {accountData.address.street = `${e.target.value}`}}\r\n                    />\r\n                    <input id=\"number\" type=\"number\" \r\n                    placeholder=\"N°\" required\r\n                    onChange={e => {accountData.address.number = `${e.target.value}`}}\r\n                    />\r\n                </S.Address>\r\n                <S.Complement>\r\n                    <input id=\"neighborhood\" type=\"text\" \r\n                    placeholder=\"Bairro\" required\r\n                    onChange={e => {accountData.address.neighborhood = `${e.target.value}`}}\r\n                    />\r\n                </S.Complement>\r\n                <S.City>\r\n                    {/* BUSCA POR CIDADES */}\r\n                    <select id=\"city\" name=\"city\" \r\n                    onChange={e => { \r\n                        accountData.address.city = `${e.target.value}`\r\n                    }}>\r\n                    <option selected value=\"\">Cidade</option>\r\n                    <div id=\"insertCities\">\r\n\r\n                    </div>\r\n                    {\r\n                    cities.map(c => (\r\n                    <option value={c._id}>{c.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    {/* BUSCA POR ESTADOS */}\r\n                    <select id=\"uf\" name=\"uf\" \r\n                    onLoad={e => { accountData.address.state = `${e.target.value}`}}\r\n                    onChange={handleSelectedState}>\r\n                    <option selected value=\"\">UF</option>\r\n                    {\r\n                    states.map(s => (\r\n                    <option value={s._id}>{s.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    <input id=\"postalcode\" type=\"number\" \r\n                    placeholder=\"CEP\" required\r\n                    onChange={e => {accountData.address.postalCode = `${e.target.value}`}}\r\n                    />\r\n                </S.City>\r\n            </Collapsible>\r\n            <Footer />\r\n        </S.Container>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Transactions"]},"metadata":{},"sourceType":"module"}