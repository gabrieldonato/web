[{"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\index.js":"1","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignIn\\index.js":"2","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignIn\\styles.js":"3","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\services\\api.js":"4","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\CompanyCreate\\index.js":"5","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\CompanyCreate\\styles.js":"6","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Header\\index.js":"7","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Header\\styles.js":"8","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Footer\\index.js":"9","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Footer\\styles.js":"10","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\routes\\index.js":"11","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Transactions\\index.js":"12","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Transactions\\styles.js":"13","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignUp\\index.js":"14","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignUp\\styles.js":"15","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Dash\\index.js":"16","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Dash\\styles.js":"17","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Home\\index.js":"18","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Home\\styles.js":"19"},{"size":205,"mtime":1610034329378,"results":"20","hashOfConfig":"21"},{"size":1796,"mtime":1610529212550,"results":"22","hashOfConfig":"21"},{"size":773,"mtime":1610336226424,"results":"23","hashOfConfig":"21"},{"size":187,"mtime":1609609822086,"results":"24","hashOfConfig":"21"},{"size":8662,"mtime":1610529869775,"results":"25","hashOfConfig":"21"},{"size":4333,"mtime":1610260141765,"results":"26","hashOfConfig":"21"},{"size":318,"mtime":1610502027835,"results":"27","hashOfConfig":"21"},{"size":321,"mtime":1609753685445,"results":"28","hashOfConfig":"21"},{"size":174,"mtime":1610015373255,"results":"29","hashOfConfig":"21"},{"size":271,"mtime":1610015409501,"results":"30","hashOfConfig":"21"},{"size":936,"mtime":1610335386942,"results":"31","hashOfConfig":"21"},{"size":12000,"mtime":1610530314287,"results":"32","hashOfConfig":"21"},{"size":5187,"mtime":1610496342527,"results":"33","hashOfConfig":"21"},{"size":1836,"mtime":1610529350144,"results":"34","hashOfConfig":"21"},{"size":740,"mtime":1610336390239,"results":"35","hashOfConfig":"21"},{"size":1786,"mtime":1610529517290,"results":"36","hashOfConfig":"21"},{"size":1157,"mtime":1610326693486,"results":"37","hashOfConfig":"21"},{"size":424,"mtime":1610335307860,"results":"38","hashOfConfig":"21"},{"size":872,"mtime":1610335196115,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"36frxh",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\index.js",[],["82","83"],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignIn\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignIn\\styles.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\services\\api.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\CompanyCreate\\index.js",["84"],"import React, { useState, useEffect } from 'react'\r\nimport * as S from './styles'\r\nimport Header from '../../components/Header'\r\nimport Collapsible from 'react-collapsible'\r\nimport Footer from '../../components/Footer'\r\nimport nextIcon from '../../assets/next.png'\r\nimport api from '../../services/api'\r\n\r\n\r\nfunction CompanyCreate(){\r\n\r\n    //State para buscas na API\r\n    const [bank, setBank] = useState([])\r\n    const [states, setStates] = useState([])\r\n    const [cities, setCities] = useState([])\r\n    \r\n    //Criação dos dados para envio da requisição\r\n    let accountData = {\r\n    \"type\": `private`,\r\n    \"document\": `46645341830`,\r\n    \"name\": `Gabriel Lins Donato`,\r\n    \"email\": `${localStorage.getItem('email')}`,\r\n    \"phoneNumbers\": [],\r\n    \"address\": {\r\n        \"street\": `Praça Epitácio Pessoa`,\r\n        \"number\": `03`,\r\n        \"complement\": `Centro`,\r\n        \"neighborhood\": `Centro`,\r\n        \"state\": `SP`,\r\n        \"city\": `Pedreira`,\r\n        \"postalCode\": `13920000`\r\n},\r\n    \"bankAccount\": {\r\n        \"type\": `currentAccount`,\r\n        \"bank\": `033`,\r\n        \"agency\": `0298`,\r\n        \"account\": `01021857`,\r\n        \"accountDigit\": `9`\r\n}\r\n}\r\n    //Carregar Bancos e Estados ao iniciar\r\n    useEffect(()=>{\r\n        loadBanks()\r\n        loadStates()    \r\n    },[])\r\n\r\n\r\n    //Carregar Bancos\r\n    async function loadBanks() {\r\n        await api.get(`/bank`)\r\n        .then(response => {\r\n            setBank(response.data)\r\n        }) \r\n    }\r\n\r\n    //Carregar Estados\r\n    async function loadStates(){\r\n        await api.get(`/geo/states`)\r\n        .then(response =>{\r\n            setStates(response.data)\r\n        })\r\n    }\r\n\r\n    //Carregar Cidades\r\n    async function loadCities(){\r\n        await api.get(`/geo/states/${accountData.address.state}/cities`)\r\n        .then(response =>{\r\n            setCities(response.data)\r\n        })\r\n    }\r\n\r\n    //Envio da requisição\r\n    async function submitAccount(){\r\n        //Bearer Token configurado com localStorage\r\n        const config = {\r\n            headers: { \"Authorization\": `bearer ${localStorage.getItem('token')}` }\r\n        };\r\n        //Criação da Empresa na API\r\n        await api.post(\"/company\", accountData, config)\r\n        .then(response =>{\r\n            alert(\"Empresa cadastrada com sucesso!\")\r\n            window.location.href = \"/dash\"\r\n        })\r\n        .catch(error =>{\r\n            alert(\"Confira os dados e tente novamente!\")\r\n        })\r\n    }\r\n    \r\n    //Atualizar cidades com base no estado\r\n    function handleSelectedState(event){\r\n        accountData.address.state = `${event.target.value}`\r\n        loadCities()\r\n        let insert = document.getElementById('insertCities')\r\n        insert.innerHTML = cities.map(c => (\r\n            <option value={c._id}>{c.name}</option>\r\n            ))\r\n    }\r\n\r\n    return(\r\n        <S.Container>\r\n            <Header />\r\n                <h1>CRIAÇÃO DE EMPRESA</h1>\r\n            <Collapsible className=\"collMenu\" trigger=\"Dados Pessoais\">\r\n            <S.PersonalArea>\r\n\r\n                {/* Atualizar variável com dados inseridos */}\r\n                {/* Dados Pessoais */}\r\n                <input className=\"default\" type=\"text\" \r\n                placeholder=\"Nome / Razão Social\" required\r\n                onChange={e => {accountData.name = `${e.target.value}`}}\r\n                />\r\n                <input className=\"default\" type=\"text\" \r\n                placeholder=\"CPF / CNPJ\" required\r\n                onChange={e => {accountData.document = `${e.target.value}`}}\r\n                />\r\n                <input id=\"phoneNumbers\" type=\"number\"\r\n                placeholder=\"(99) 99999-9999\"\r\n                onChange={e => {accountData.phoneNumbers = `${e.target.value}`}}\r\n                />\r\n                <select id=\"typeCompany\" className=\"typeCompany\" \r\n                onChange={e => {accountData.type = `${e.target.value}`}}\r\n                >\r\n                <option selected value=\"private\">Pessoa Física</option>\r\n                <option value=\"legal\">Pessoa Jurídica</option>\r\n                </select>\r\n                \r\n                {/* Obter Endereço */}\r\n                <S.Address>\r\n                    <input id=\"street\" type=\"text\" \r\n                    placeholder=\"Endereço\" required\r\n                    onChange={e => {accountData.address.street = `${e.target.value}`}}\r\n                    />\r\n                    <input id=\"number\" type=\"number\" \r\n                    placeholder=\"N°\" required\r\n                    onChange={e => {accountData.address.number = `${e.target.value}`}}\r\n                    />\r\n                </S.Address>\r\n                <S.Complement>\r\n                    <input id=\"complement\" type=\"text\" \r\n                    placeholder=\"Complemento\" required\r\n                    onChange={e => {accountData.address.complement = `${e.target.value}`}}\r\n                    />\r\n                    <input id=\"neighborhood\" type=\"text\" \r\n                    placeholder=\"Bairro\" required\r\n                    onChange={e => {accountData.address.neighborhood = `${e.target.value}`}}\r\n                    />\r\n                </S.Complement>\r\n                <S.City>\r\n                    {/* BUSCA POR CIDADES */}\r\n                    <select id=\"city\" name=\"city\" \r\n                    onChange={e => { \r\n                        accountData.address.city = `${e.target.value}`\r\n                    }}>\r\n                    <option selected value=\"\">Cidade</option>\r\n                    <div id=\"insertCities\">\r\n\r\n                    </div>\r\n                    {\r\n                    cities.map(c => (\r\n                    <option value={c._id}>{c.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    {/* BUSCA POR ESTADOS */}\r\n                    <select id=\"uf\" name=\"uf\" \r\n                    onLoad={e => { accountData.address.state = `${e.target.value}`}}\r\n                    onChange={handleSelectedState}>\r\n                    <option selected value=\"\">UF</option>\r\n                    {\r\n                    states.map(s => (\r\n                    <option value={s._id}>{s.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    <input id=\"postalcode\" type=\"number\" \r\n                    placeholder=\"CEP\" required\r\n                    onChange={e => {accountData.address.postalCode = `${e.target.value}`}}\r\n                    />\r\n                </S.City>\r\n            </S.PersonalArea>\r\n            </Collapsible>\r\n            <Collapsible className=\"collMenu\" trigger=\"Dados Bancários\">\r\n            <S.BankArea>\r\n                {/* Busca por Bancos */}\r\n                <select id=\"bank\" name=\"bank\" \r\n                onLoad={e => { accountData.bankAccount.bank = `${e.target.value}`}}\r\n                onChange={e => { accountData.bankAccount.bank = `${e.target.value}`}}>\r\n                <option selected value=\"\">ESCOLHA SEU BANCO</option>\r\n                    {\r\n                    bank.map(b => (\r\n                    <option value={b._id}>{b.name}</option>\r\n                    ))}\r\n                </select>\r\n                \r\n                {/* Obter dados Bancários */}\r\n                <S.DataBank>\r\n                    <input id=\"agency\" type=\"number\" \r\n                    placeholder=\"Agência\" required \r\n                    onChange={e => {accountData.bankAccount.agency = `${e.target.value}`}}\r\n                    />\r\n                    <input id=\"account\" type=\"number\" \r\n                    placeholder=\"Conta\" required \r\n                    onChange={e => {accountData.bankAccount.account = `${e.target.value}`}}\r\n                    />\r\n                    <input id=\"digit\" type=\"number\" \r\n                    placeholder=\"Dígito\" required \r\n                    onChange={e => {accountData.bankAccount.accountDigit = `${e.target.value}`}}\r\n                    />\r\n                </S.DataBank>\r\n                <select id=\"typeAccount\" name=\"typeAccount\" \r\n                onChange={e => {accountData.bankAccount.type = `${e.target.value}`}}\r\n                >\r\n                <option selected value=\"currentAccount\">Conta Corrente</option>\r\n                <option value=\"savings\">Conta Poupança</option>\r\n                </select>\r\n            </S.BankArea>\r\n            </Collapsible>\r\n                <S.Next>\r\n                <a onClick={submitAccount}>\r\n                <img src={nextIcon} alt=\"next\" />\r\n                </a>\r\n                </S.Next>\r\n            <Footer style={`padding-top: 100px;`}/>\r\n        </S.Container>\r\n    )\r\n}\r\n\r\nexport default CompanyCreate","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\CompanyCreate\\styles.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Header\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Header\\styles.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Footer\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\components\\Footer\\styles.js",[],["85","86"],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\routes\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Transactions\\index.js",["87","88","89"],"import React, { useEffect, useState } from 'react'\r\nimport Footer from '../../components/Footer'\r\nimport Header from '../../components/Header'\r\nimport Collapsible from 'react-collapsible'\r\nimport api from '../../services/api'\r\nimport next from \"../../assets/next.png\"\r\nimport * as S from './styles'\r\n\r\nfunction Transactions(){\r\n    \r\n    //State para obter Estado/Cidade\r\n    const [states, setStates] = useState([])\r\n    const [cities, setCities] = useState([])\r\n    //Variável para envio da Transação\r\n    let transaction = {\r\n        \"gatewayKey\": \"8353b77a-0d11-4a81-8b34-ac334bed7287\",\r\n        \"returnUrl\": ``,\r\n        \"foreignOrderId\": ``,\r\n        \"amount\": 1.00,\r\n        \"installments\": 1,\r\n        \"cardNumber\": ``,\r\n        \"cardCvv\": ``,\r\n        \"cardExpirationDate\": ``,\r\n        \"cardHolderName\": ``,\r\n        \"cardFlag\": ``,\r\n        \"paymentType\": \"credit_card\",\r\n        \"customer\": {\r\n        \"name\": ``,\r\n        \"document\": ``,\r\n        \"type\": \"private\",\r\n        \"email\": ``,\r\n        \"phoneNumbers\": [ ],\r\n        \"addresses\": {\r\n                \"street\": \"\",\r\n                \"number\": \"\",\r\n                \"neighborhood\": \"\",\r\n                \"city\": \"\",\r\n                \"postalCode\": \"\",\r\n                \"state\": \"\"}\r\n        },\r\n        \"items\": [],\r\n        \"boletos\": []\r\n    }\r\n\r\n    //Configuração do Bearer Token com localStorage\r\n    const config = {\r\n        headers: { \"Authorization\": `bearer ${localStorage.getItem('token')}` }\r\n    }\r\n    \r\n    //Validar autenticação e carregar Estados\r\n    useEffect(()=>{\r\n        validation()\r\n        loadStates()\r\n    },[])\r\n\r\n    //Carregar Estados\r\n    async function loadStates(){\r\n        await api.get(`/geo/states`)\r\n        .then(response =>{\r\n            setStates(response.data)\r\n        })\r\n    }\r\n\r\n    //Carregar Cidades\r\n    async function loadCities(){\r\n        await api.get(`/geo/states/${transaction.customer.addresses.state}/cities`)\r\n        .then(response =>{\r\n            setCities(response.data)\r\n        })\r\n        .catch(error =>{    \r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    //Atualizar cidades com base no estado\r\n    function handleSelectedState(event){\r\n        transaction.customer.addresses.state = document.getElementById(\"uf\").value\r\n        loadCities()\r\n        let insert = document.getElementById('insertCities')\r\n        insert.innerHTML = cities.map(c => (\r\n            <option value={c._id}>{c.name}</option>\r\n            ))\r\n    }\r\n\r\n    //Validar se o usuário já se autenticou\r\n    function validation(){\r\n        if(localStorage.getItem('token') === null || localStorage.getItem('token') === \"undefined\"){\r\n            window.location.href = \"/\"\r\n        }\r\n    }\r\n\r\n    async function submitBoleto(){\r\n        //RETIRAR DADOS CONVERGENTES DO BOLETO E ENVIAR REQUISIÇÃO\r\n        transaction.boletos = {\r\n            \"amount\": document.getElementById(\"amountBoleto\").value,\r\n            \"dueDate\": document.getElementById(\"dueDateBoleto\").value,\r\n            \"installment\": document.getElementById(\"installmentBoleto\").value\r\n        }\r\n        transaction.paymentType = \"boleto\"\r\n        transaction.amount = 0\r\n        transaction.installments = 1\r\n        transaction.foreignOrderId = document.getElementById(\"foreignOrderId\").value\r\n        transaction.cardNumber = \"\"\r\n        transaction.cardCvv = \"\"\r\n        transaction.cardExpirationDate = \"\"\r\n        transaction.cardHolderName = \"\"\r\n        transaction.cardFlag = \"\"\r\n        transaction.customer.name = document.getElementById(\"nameCustomer\").value\r\n        transaction.customer.email = document.getElementById(\"emailCustomer\").value\r\n        transaction.customer.document = document.getElementById(\"documentCustomer\").value\r\n        transaction.customer.phoneNumbers = document.getElementById(\"phoneNumbersCustomer\").value\r\n        transaction.customer.type = document.getElementById(\"typeCustomer\").value\r\n        transaction.customer.addresses.street = document.getElementById(\"street\").value\r\n        transaction.customer.addresses.number = document.getElementById(\"number\").value\r\n        transaction.customer.addresses.neighborhood = document.getElementById(\"neighborhood\").value\r\n        transaction.customer.addresses.city = document.getElementById(\"city\").value\r\n        transaction.customer.addresses.state = document.getElementById(\"uf\").value\r\n        transaction.customer.addresses.postalCode = document.getElementById(\"postalCode\").value\r\n        \r\n        //Post Transação\r\n        await api.post(\"/transaction\", transaction)\r\n        .then(response =>{\r\n            alert(\"Cadastro realizado!\")\r\n        })\r\n        .catch(error =>{\r\n            alert(\"Erro, tente novamente!\")\r\n        })\r\n    }\r\n\r\n    async function submitCartao(){\r\n\r\n        //RETIRAR DADOS CONVERGENTES DO CARTÃO E ENVIAR REQUISIÇÃO\r\n        transaction.boletos = []\r\n        transaction.paymentType = \"credit_card\"\r\n        transaction.amount = document.getElementById(\"amount\").value\r\n        transaction.installments = document.getElementById(\"installments\").value\r\n        transaction.foreignOrderId = document.getElementById(\"foreignOrderId\").value\r\n        transaction.cardNumber = document.getElementById(\"cardNumber\").value\r\n        transaction.cardCvv = document.getElementById(\"cardCvv\").value\r\n        transaction.cardExpirationDate = document.getElementById(\"cardExpirationDate\").value\r\n        transaction.cardHolderName = document.getElementById(\"cardHolderName\").value\r\n        transaction.cardFlag = document.getElementById(\"cardFlag\").value\r\n        transaction.customer.name = document.getElementById(\"nameCustomer\").value\r\n        transaction.customer.email = document.getElementById(\"emailCustomer\").value\r\n        transaction.customer.document = document.getElementById(\"documentCustomer\").value\r\n        transaction.customer.phoneNumbers = document.getElementById(\"phoneNumbersCustomer\").value\r\n        transaction.customer.type = document.getElementById(\"typeCustomer\").value\r\n        transaction.customer.addresses.street = document.getElementById(\"street\").value\r\n        transaction.customer.addresses.number = document.getElementById(\"number\").value\r\n        transaction.customer.addresses.neighborhood = document.getElementById(\"neighborhood\").value\r\n        transaction.customer.addresses.city = document.getElementById(\"city\").value\r\n        transaction.customer.addresses.state = document.getElementById(\"uf\").value\r\n        transaction.customer.addresses.postalCode = document.getElementById(\"postalCode\").value\r\n        \r\n        //Post Transação\r\n        await api.post(\"/transaction\", transaction)\r\n        .then(response =>{\r\n            alert(\"Cadastro realizado!\")\r\n        })\r\n        .catch(error =>{\r\n            alert(\"Erro, tente novamente!\")\r\n        })\r\n\r\n    }\r\n\r\n    return(\r\n        <S.Container>\r\n            <Header />\r\n            <h1>Cadastrar Transação</h1>\r\n            {/* Inserir Dados */}\r\n            {/* Variáveis serão atualizadas no submit */}\r\n            <S.Prices>\r\n                {/* Detalhes */}\r\n                <input id=\"amount\" type=\"number\" placeholder=\"Valor (Ex: 150.00)\"/>\r\n                <input id=\"installments\" type=\"number\" placeholder=\"Parcelas (Ex: 2)\"/>\r\n                <input id=\"foreignOrderId\" type=\"text\" placeholder=\"Descrição\"/>\r\n            </S.Prices>\r\n            <S.CustomerData>\r\n            <Collapsible className=\"collMenu\" trigger=\"Cliente\">\r\n            <S.PersonalData>\r\n                {/* Dados do Cliente */}\r\n            <input className=\"default\" type=\"text\" \r\n            placeholder=\"Nome\" required\r\n            id=\"nameCustomer\"\r\n            />\r\n            <input className=\"default\" type=\"text\" \r\n            placeholder=\"CPF ou RG\" required\r\n            id=\"documentCustomer\"\r\n            />\r\n            <input id=\"emailCustomer\" type=\"text\"\r\n            placeholder=\"E-mail\"\r\n            id=\"emailCustomer\"\r\n            />\r\n            <input type=\"number\"\r\n            placeholder=\"(99) 99999-9999\"\r\n            id=\"phoneNumbersCustomer\"\r\n            />\r\n            {/* Tipo de Cliente */}\r\n            <select id=\"typeCustomer\" className=\"typeCustomer\">\r\n            <option selected value=\"none\">Selecione o Tipo</option>\r\n            <option value=\"private\">Pessoa Física</option>\r\n            <option value=\"legal\">Pessoa Jurídica</option>\r\n            </select>\r\n            </S.PersonalData>\r\n            <S.Address>\r\n                {/* Endereço do Cliente */}\r\n                <input id=\"street\" type=\"text\" \r\n                placeholder=\"Endereço\" required\r\n                />\r\n                <input id=\"number\" type=\"number\" \r\n                placeholder=\"N°\" required\r\n                />\r\n            </S.Address>\r\n            <S.Complement>\r\n                    <input id=\"neighborhood\" type=\"text\" \r\n                    placeholder=\"Bairro\" required\r\n                    />\r\n                </S.Complement>\r\n                <S.City>\r\n                    {/* BUSCA POR CIDADES */}\r\n                    <select id=\"city\" name=\"city\">\r\n                    <option selected value=\"\">Cidade</option>\r\n                    <div id=\"insertCities\">\r\n\r\n                    </div>\r\n                    {\r\n                    cities.map(c => (\r\n                    <option value={c._id}>{c.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    {/* BUSCA POR ESTADOS */}\r\n                    <select id=\"uf\" name=\"uf\"\r\n                    onChange={handleSelectedState}>\r\n                    <option selected value=\"\">UF</option>\r\n                    {\r\n                    states.map(s => (\r\n                    <option value={s._id}>{s.name}</option>\r\n                    ))\r\n                    }\r\n                    </select>\r\n                    <input id=\"postalCode\" type=\"number\" \r\n                    placeholder=\"CEP\" required/>\r\n                </S.City>\r\n                </Collapsible>\r\n            </S.CustomerData>\r\n            <Footer />\r\n            <S.Boleto>\r\n                {/* Dados do Boleto */}\r\n            <Collapsible className=\"collMenu\" trigger=\"Boleto\">\r\n            <input id=\"amountBoleto\" type=\"number\" \r\n            placeholder=\"Valor (Ex: 150.00)\" required\r\n            />\r\n            <input id=\"installmentBoleto\" type=\"text\" \r\n            placeholder=\"Parcelas (Ex: 2)\" required\r\n            />\r\n            <input id=\"dueDateBoleto\" type=\"text\" \r\n            placeholder=\"Data de Vencimento (Ex: 2021-12-31T23:59:00.000Z)\" required\r\n            /> \r\n            <img src={next} alt=\"setBoleto\" onClick={submitBoleto}/>\r\n            </Collapsible>\r\n            </S.Boleto>\r\n            <S.Cartao>\r\n            <Collapsible className=\"collMenu\" trigger=\"Cartão de Crédito\">\r\n                {/* Dados do Cartão */}\r\n            <input id=\"cardNumber\" type=\"number\" \r\n            placeholder=\"Número do Cartão\" required\r\n            />\r\n            <input id=\"cardHolderName\" type=\"text\" \r\n            placeholder=\"Nome do Cartão\" required\r\n            />\r\n            <input id=\"cardExpirationDate\" type=\"number\" \r\n            placeholder=\"Data de expiração (apenas números)\" required\r\n            />\r\n            <input id=\"cardCvv\" type=\"number\" \r\n            placeholder=\"CVV\" required\r\n            />\r\n            <select id=\"cardFlag\" className=\"cardFlag\">\r\n            <option selected value=\"visa\">Selecione a Bandeira</option>\r\n            <option value=\"visa\">Visa</option>\r\n            <option value=\"mastercard\">Mastercard</option>\r\n            <option value=\"amex\">Amex</option>\r\n            <option value=\"elo\">Elo</option>\r\n            <option value=\"hipercard\">Hipercard</option>\r\n            </select>\r\n            {/* Enviar Dados */}\r\n            <img src={next} id=\"clearBoleto\" onClick={submitCartao}/>\r\n            </Collapsible>\r\n            </S.Cartao>\r\n            \r\n        </S.Container>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Transactions","C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Transactions\\styles.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignUp\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\SignUp\\styles.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Dash\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Dash\\styles.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Home\\index.js",[],"C:\\Users\\gabri\\Desktop\\Pagarapido\\MERN\\WEB\\web\\src\\views\\Home\\styles.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":219,"column":17,"nodeType":"96","endLine":219,"endColumn":44},{"ruleId":"90","replacedBy":"97"},{"ruleId":"92","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":46,"column":11,"nodeType":"101","messageId":"102","endLine":46,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":192,"column":13,"nodeType":"105","endLine":192,"endColumn":31},{"ruleId":"106","severity":1,"message":"107","line":287,"column":13,"nodeType":"96","endLine":287,"endColumn":70},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["108"],["109"],"no-unused-vars","'config' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]